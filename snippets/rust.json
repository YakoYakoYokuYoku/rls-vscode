{
    "extern crate": {
        "prefix": "extern crate",
        "body": [
            "extern crate ${1:name};$0"
        ],
        "description": "Insert extern crate"
    },
    "use": {
        "prefix": "use",
        "body": "use $1;"
        "description": "Insert use"
    },
    "for": {
        "prefix": "for",
        "body": [
            "for ${1:var} in ${2:range} {",
            "\t$0",
            "}"
        ],
        "description": "Insert for loop"
    },
    "let": {
        "prefix": "let",
        "body": "let ${1:local const} = ${2:expr}",
        "description": "Insert let"
    },
    "let as": {
        "prefix": "let as",
        "body": "let ${1:local const} = ${2:expr} as {3:type}",
        "description": "Insert let as"
    },
    "let mut": {
        "prefix": "let mut",
        "body": "let mut ${1:mut var} = ${2:expr}",
        "description": "Insert let mut"
    },
    "let mut as": {
        "prefix": "let mut as",
        "body": "let mut ${1:mut var} = ${2:expr} as ${3:type}",
        "description": "Insert let mut as"
    },
    "while": {
        "prefix": "while",
        "body": [
            "while ${1:condition} {",
            "\t${2:args}",
            "}"
        ],
        "description": "Insert while loop"
    },
    "while let": {
        "prefix": "while let",
        "body":[
            "while let ${1:pattern} = ${2:expr} {",
            "\t${3:args}",
            "}"
        ],
        "description": "Insert while let loop"
    },
    "unimplemented": {
        "prefix": "unimplemented",
        "body": [
            "unimplemented!()"
        ],
        "description": "Insert unimplemented!"
    },
    "unreachable": {
        "prefix": "unreachable",
        "body": [
            "unreachable!()"
        ],
        "description": "Insert unreachable!"
    },
    "println": {
        "prefix": "println",
        "body": [
            "println!(\"${1:{\\}}\", $2)$0"
        ],
        "description": "Insert println!"
    },
    "assert": {
        "prefix": "assert",
        "body": [
            "assert!($1)$0"
        ],
        "description": "Insert assert!"
    },
    "assert_eq": {
        "prefix": "assert_eq",
        "body": [
            "assert_eq!($1, $2)$0"
        ],
        "description": "Insert assert_eq!"
    },
    "macro_rules": {
        "prefix": "macro_rules",
        "body": [
            "macro_rules! $1 {",
            "\t($2) => {",
            "\t\t$0",
            "\t};",
            "}"
        ],
        "description": "Insert macro_rules!"
    },
    "if let Option": {
        "prefix": "if let",
        "body": [
            "if let Some(${1:foo}) = ${1:foo} {",
            "\t${0:${1:foo}.}",
            "}"
        ],
        "description": "Unwrap Option with if let"
    },
    "spawn": {
        "prefix": "thread::spawn",
        "body": [
            "thread::spawn(move || {",
            "\t$0",
            "});"
        ],
        "description": "Wrap code in thread::spawn"
    },
    "derive": {
        "prefix": "derive",
        "body": [
            "#[derive(${1})]"
        ],
        "description": "#[derive(…)]"
    },
    "cfg": {
        "prefix": "cfg",
        "body": [
            "#[cfg(${1})]"
        ],
        "description": "#[cfg(…)]"
    },
    "test": {
        "prefix": "test",
        "body": [
            "#[test]",
            "fn ${1:name}() {",
            "    ${2:unimplemented!();}",
            "}"
        ],
        "description": "#[test]"
    },
    "function": {
        "prefix": "fn",
        "body": [
            "fn ${1:name}() {",
            "\t${2:args}",
            "}"
        ],
        "description": "Insert function"
    },
    "parameterized function": {
        "prefix": "fnpar",
        "body": [
            "fn ${1:name}(${2:var}: ${3:type}) -> ${3:type} {",
            "\t${4:args}",
            "}"
        ],
        "description": "Insert parametrized function",
    },
    "match": {
        "prefix": "mat",
        "body": [
            "match ${1:var} {",
            "\t${2:args}",
            "}"
        ],
        "description": "Insert match"
    }
}
